//! Serial arithmetic.
//!
//! This code implements prime-field and extension-field arithmetic
//! using `u128`s. Speed is not the highest priority, because the idea
//! is that the bulk of the work will be done using the vectorized
//! implementation.
//!

/// The Mersenne prime \\(2^{127} - 1\\).
const P: u128 = (1 << 127) - 1;

/// An element of the Mersenne field.
pub struct F127(u128);

impl From<u128> for F127 {
    // XXX check behaviour in extremal case 0b111...11 (not fully reduced?)
    #[inline]
    fn from(x: u128) -> F127 {
        let y = x.wrapping_sub(P);
        // sign_mask is 0b111...11 if x < P, 0b000...00 if x >= P
        let sign_mask = (0i128 - ((y >> 127) as i128)) as u128;

        F127(y.wrapping_add(sign_mask & P))
    }
}

impl Into<u128> for F127 {
    #[inline]
    fn into(self) -> u128 {
        self.0
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn from_to_roundtrips_on_reduced_values() {
        let xs = [
            101054725971136791246222244709531340474u128,
            38188712660835962328561942614081743514u128,
            43654918112560223727172090912658261884u128,
            61331686004747624160469066397670963925u128,
        ];

        for x in &xs {
            let expected_x: u128 = F127::from(*x).into();
            assert_eq!(*x, expected_x);
        }
    }

    #[test]
    fn from_performs_reduction() {
        let unred_red_pairs = [
            (
                316359973995368844939217233962370990276u128,
                146218790534899613207529930246486884549u128,
            ),
            (
                323686882786572482033927420505583807954u128,
                153545699326103250302240116789699702227u128,
            ),
            (
                339808425234034235397003825875747537381u128,
                169667241773565003665316522159863431654u128,
            ),
            (
                78832676377202070809965755704023168971u128,
                78832676377202070809965755704023168971u128,
            ),
            (
                43812162065911154136701101896906091965u128,
                43812162065911154136701101896906091965u128,
            ),
            (
                132324638683888150969813638186680981558u128,
                132324638683888150969813638186680981558u128,
            ),
            (
                730084153819771364915020599152208407u128,
                730084153819771364915020599152208407u128,
            ),
            (
                211919086131547870553083681194394466619u128,
                41777902671078638821396377478510360892u128,
            ),
            (
                35421178645720921228371659367364414693u128,
                35421178645720921228371659367364414693u128,
            ),
            (
                327205612389267588884250211603357986268u128,
                157064428928798357152562907887473880541u128,
            ),
            (
                16683397807985891811074931774391133687u128,
                16683397807985891811074931774391133687u128,
            ),
            (
                58001717855874315472830045316275225016u128,
                58001717855874315472830045316275225016u128,
            ),
            (
                51063584361439847114539011067383970111u128,
                51063584361439847114539011067383970111u128,
            ),
            (
                9574356901774254814059916094643962129u128,
                9574356901774254814059916094643962129u128,
            ),
            (
                4293015859856178080083618454198043480u128,
                4293015859856178080083618454198043480u128,
            ),
            (
                283766243081794726543592691077757634053u128,
                113625059621325494811905387361873528326u128,
            ),
            (
                333998349379846203695113012987173188222u128,
                163857165919376971963425709271289082495u128,
            ),
            (
                199106767012485132288421035537875019060u128,
                28965583552015900556733731821990913333u128,
            ),
            (
                32314168016724094500627352050981461781u128,
                32314168016724094500627352050981461781u128,
            ),
            (
                133053420016892577432658750995752594899u128,
                133053420016892577432658750995752594899u128,
            ),
            (
                48124290880540545297272919064241810574u128,
                48124290880540545297272919064241810574u128,
            ),
            (
                296658597120393086077795954676974398220u128,
                126517413659923854346108650961090292493u128,
            ),
            (
                8647025748175657100044268583717195997u128,
                8647025748175657100044268583717195997u128,
            ),
            (
                81865314317960247763516360038234750525u128,
                81865314317960247763516360038234750525u128,
            ),
            (
                181988353032872819223869674271781800483u128,
                11847169572403587492182370555897694756u128,
            ),
            (
                205457633882499243932555476610678954937u128,
                35316450422030012200868172894794849210u128,
            ),
            (
                14452073785687773229831883694370443838u128,
                14452073785687773229831883694370443838u128,
            ),
            (
                125821384587444291123221959520213414333u128,
                125821384587444291123221959520213414333u128,
            ),
            (
                84501587326108098239451137111213147763u128,
                84501587326108098239451137111213147763u128,
            ),
            (
                327846577125570595279204745172495776646u128,
                157705393665101363547517441456611670919u128,
            ),
            (
                33300315154471403096180027404189975651u128,
                33300315154471403096180027404189975651u128,
            ),
            (
                329105696748516168872318159118951822869u128,
                158964513288046937140630855403067717142u128,
            ),
        ];

        for (x_unred, x_red) in &unred_red_pairs {
            let expected_x_red: u128 = F127::from(*x_unred).into();
            assert_eq!(*x_red, expected_x_red);
        }
    }
}
